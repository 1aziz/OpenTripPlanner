---
- hosts: opentripplanner
  user: root

  # Gather facts only


- hosts: graphbuilder
  user: root

  tasks:

  - name: Stat OSM data
    stat: path={{ osm_file }}
    register: osm_stat

  - name: Download OSM data if stale
    get_url: url={{ osm_url }} dest={{ osm_file }} force=yes
    when: not osm_stat.stat.exists or
          ansible_date_time.epoch|float - osm_stat.stat.mtime > data_expiry

  - name: Stat GTFS data
    stat: path={{ gtfs_file }}
    register: gtfs_stat

  - name: Download GTFS data if stale
    get_url: url={{ gtfs_url }} dest={{ gtfs_file }}
    when: not gtfs_stat.stat.exists or
          ansible_date_time.epoch|float - gtfs_stat.stat.mtime > data_expiry

  - name: Stat graph
    stat: path=/var/otp/data/Graph.obj
    register: graph_stat

  - name: Build graph
    command: java -Xmx10G -jar /usr/local/share/java/otp.jar
             --build /var/otp/data --longDistance --transitIndex
    when: not graph_stat.stat.exists or
          ansible_date_time.epoch|float - graph_stat.stat.mtime > data_expiry
    register: build

  - name: Distribute graph
    command: rsync -rl -i --delete
                  /var/otp/data/Graph.obj
                  root@{{ hostvars[item].inventory_hostname }}:/var/otp/graphs/Graph.obj
    with_items: ${groups.opentripplanner}
    register: distribute_res
    changed_when: distribute_res.stdout != ""

  vars:
    osm_url: http://download.geofabrik.de/openstreetmap/europe/netherlands.osm.pbf
    osm_file: '/var/otp/data/netherlands.osm.pdf'
    gtfs_url: http://gtfs.ovapi.nl/gtfs-nl.zip
    gtfs_file: '/var/otp/data/gtfs-nl.zip'



- hosts: opentripplanner
  user: root

  tasks:
  - name: Restart OTP
    service: name=otp state=restarted
    when: build is defined and build.changed
